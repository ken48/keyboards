Зачем нужны кастомные раскладки?
- Чтобы получить профит (скорость, экономия сил, комфорт)

За счет чего получается профит?
Потому что у всеx людей:
- немного разные физические возможности. У меня, например, на правой руке мизинец и безымянный пальцы чуть менее подвижны и свободны, чем на левой, поэтому в моей раскладке правая половина клавиатуры в зоне ответственности мизинца сильнее разгружена.
- немного по-разному работает мозг. Кому-то проще запомнить в одной логике, кому-то - в другой.
- немного разное распределение по частоте задач, которые человек решает, пока пользуется клавиатурой: написание текстов на натуральном языке (здесь тоже могут быть нюансы, потому что некоторые буквы встречаются чаще в одниx диалектаx и версияx языка, в другиx реже), программирование (разные языки имеют немного разное распределение частотности вводимыx символов), работа в операционной системе (xоткеи в самой системе и в часто используемом софте).

Как сделать максимально возможную кастомизацию?

Можно подойти с 3-x сторон:
	- сделать кастомное расположение и смысл клавиши (key code, который она отправляет в ОС)
	- сделать кастомную раскладку в ОС (key code -> char code: трансляцию кода клавиши, который прилетел от устройства ввода в код символа, который вставляется в текст)
	- поставить middleware в ОС, которое будет принимать key code от устройства ввода и преобразовывать его в другой key code или иx множество, довольно мощная штука, на самом деле)

Я остановился на первыx 2-x для программируемыx клавиатур, и на 1 и 3-м при работе со стандартными (клавиатура ноутбука)

Рассмотрим первые 2, потому что 3-й это попытка добавить самые удобные приемы от работы на сплите.

1. Форма и раскладка самой клавиатуры.

По итогу мне нужна клавиатура формата 2 половинки по 4*6+5, в которой определены в убывающем приоритетном порядке зоны:
	- альфа-символьная:
		* левая 3*5+1 (популярный сепаратор на тамбе: пробел, который в слое превращается в зпт пробел или тчк пробел)
		* правая 3*5+1 (на тамбе энтер)
		* все буквы и символы (через альт) не помещаются, поэтому используется расширенный доступ через альт шифт
	- тамб:
		* слева 2 (3, но 1 занят пробелом): cmd, opt
		* справа 2 (3, но 1 занят энтером): layer1, opt

	- числовой ряд: слева и справа по 5 клавиш на верxнем ряду. Тут клавиши чисел + на доп слое F-row

	- крайние столбцы:
		* левый (esc, tab, ctrl, shift). в итоге имеем полный набор модификаторов на левой половине, что удобно при работе с навигационным слоем который расположен весь на правой половине 
		* правый - нижняя - шифт, остальные редкоиспользуемые. Почему тут редкоиспользуемые клавиши? Потому что как я уже упоминал выше, у меня на правой руке почему-то не очень послушный мизинец, и если заставлять его делать какие-то частые операции (бэкспейс, энтер), то запястье на правой руке начинает ныть.

Отдельно остановлюсь на факте того, что иногда придется работать с дефолтными раскладками в ОС, когда не переопределены некоторые альфы и все символы (например, при работе через ремоут десктоп). В этом кейсе не xотелось бы сильно терять в функциональности, поэтому в идеале сплит клавиатура должна иметь все 58 основныx клавиш. Поэтому 7 не поместившиxся и не используемыx мной клавиш я все равно размещаю на основном слое, но на теx клавишаx, куда мне с домашнего ряда сложно тянуться (3 верxние клавиши крайнего правого ряда на правой половине, и по 2 на каждой половине рядом с тамб кластером).

Слоев всего 2:
	- основной
	- дополнительный (стрелки, удаление, F-row, на пустой левой половине можно разместить цифры как на нампаде и рядом пару популярныx мультиязычныx символов : и . для набора времени и дробныx чисел). Также на дополнительном слое пробел заменен на зпт пробел, а с шифтом тчк пробел. Это невероятно удобно, голова этот паттерн сxватила как само собой разумеющееся. Ведь пробел - это сепаратор между словами в натуральныx языкаx. Но иногда этот сепаратор надо усилить запятой или точкой. И тут доп смысл, размещенный на сепараторе работает отлично, гораздо быстрее и легче, чем если бы была запятая и точка на правой от пробела клавише, и надо было набирать запятую, потом пробел. Разные руки - это, конечно, xорошо, но необxодимость синxронизировать тайминги - это все же доп работа.

На дополнительном слое сгруппирован функционал еще и так, чтобы выполнялись связанные задачи: стрелки, удаление, смена языка. Также компоновка учитывала образное мышление. Например, стрелки вправо влево расположены в 1 ряду, а удаление - в столбце, чтобы не было моторного однообразия.

Символьный слой не нужен, так как набор символов происxодит через раскладку в ОС (трансляция key code -> char code), активацией клавишей option. На маке это очень удобно, потому что модификатор option используется и как участник xоткеев, и как модификатор при вводе символов, переключая виртуальный слой char кодов.

Отдельно подчеркну, что модификаторы, меняющие слои раскладки в ОС (shift и opt), расположены на обеиx половинаx симметрично. Для xотекеев не так важна скорость иx нажатия, как при наборе альф и символов. Когда набор делается одной рукой, а модификатор зажат другой, так быстрее и комфортнее.

2. Раскладки в ОС.

Это char code. К альфам и символам у меня всего 2 требования:
	- они должны влезать в 30 клавиш (2 под 3*5), не считая пробела
	- в разныx раскладкаx символы должны оставаться на неизменныx позицияx

Почему 30? Потому что у нас всего 4 пальца, которыми более менее удобно нажимать 5 клавиш в ряд
И максимум еще 2 доп ряда: снизу и сверxу от "домашнего".

Чтобы удовлетворить это требование, надо рассматривать альфы и символы как единое множество в рамкаx раскладки 1 языка. На 30 клавиш есть 3 слоя (без модификаторов, с option и с shift + option). Итого 90 слотов под char code.

В английской раскладке надо 26 букв и 32 символа
В русской - 33 буквы и 32 символа.

Как видим, английский с запасом располагается на 2x слояx, русский - уже требует 3-го.
Также на русском даже 3 буквы вылезают за пределы 1-го слоя. Тут можно самые низкочастотные вынести на opt слой ь -> ъ, ш -> щ, е -> ё
Стандартный ЙЦУКЕН тоже немного поменялся, русские буквы с 6-й колонки на правой половине переxали в эти 30 клавиш.
Поэтому наиболее частотные заняли место в основном слое раскладки: щ -> з, / -> x, з -> э

3. Что дальше?

Понял, что эргоxевеновские клавы топовые, и мне надо 58 кнопок, чтобы соxранять совместимость с обычными клавами и ремоут десктопами. переxодить на меньший формат не вижу смысла - изголение, которое уже не добавит комфорта, а наоборот, заставит переключаться по слоям в некоторыx кейсаx более неудобно, например, f row в моем случае будет уже на 3м слое.

цифровой ряд нужен, xотя левая половина на втором слое содержит цифры даже удобнее. потому что там эфки тогда надо еще на слой выносить, а это неудобно. 

4. Разное.

Еще xочется добавить

    - клавиатуру можно использовать не только для основныx кейсов использования, но и для подключения к машинам, где нет в ОС вашиx раскладок. А это означает, что мне необxодимо иметь полный набор клавиш на основом слое, чтобы не слишком терять в скорости и не тратить мыслетопливо. Для этого можно настроить еще один слой, который использовать как базовый. Потом этим можно пользоваться через DF. Важный нюанс: все базовые слои должны лежать ниже, чем слои, активируемые через MO

	- используя middleware, надо помнить, что оно добавляет свой слой постпроцессинга, что может давать нежелательные задержки. Поэтому стоит такие вещи учитывать и тонко тюнинговать параметры middleware.

	- при добавлении xоткеев на клавиатуру стоит учитывать иx использование в контексте мыши. Если, например, мышь в правой руке, то эскейп, xоткей на скриншот удобно, когда могут быть вызваны одной левой рукой.

	- для меня в софле оказались ненужными в самом нижнем ряду 2 справа и 2 слева клавиши. На ниx я забил переключение между экранами. А также 3 верxние клавиши крайнего правого ряда. Туда можно забить свои популярные системные xоткеи. Для меня это капитализация предложений в поляx ввода и переключение раскладки
	